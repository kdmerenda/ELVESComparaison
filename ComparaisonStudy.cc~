#include "ComparaisonStudy.h"
#include <evt/Event.h>
#include <fevt/FEvent.h>
#include <fevt/Eye.h>
#include <fevt/TelescopeSimData.h>
#include <fevt/Telescope.h>
#include <fevt/PixelSimData.h>
#include <fevt/Pixel.h>
#include <fevt/FdConstants.h>
#include <det/Detector.h>
#include <fdet/FDetector.h>
#include <fdet/Eye.h>
#include <fdet/Telescope.h>
#include <fdet/Camera.h>
#include <fdet/Pixel.h>
#include <fdet/Channel.h>
#include <fdet/Mirror.h>
#include <fdet/Filter.h>
#include <fdet/Corrector.h>

#include <utl/Point.h>
#include <utl/UTMPoint.h>
#include <utl/Particle.h>
#include <utl/Vector.h>
#include <utl/TimeStamp.h>
#include <utl/Particle.h>
#include <utl/ErrorLogger.h>
#include <utl/ReferenceEllipsoid.h>
#include <utl/RandomEngine.h>
#include <fwk/LocalCoordinateSystem.h>
#include <fwk/CoordinateSystemRegistry.h>
#include <fwk/CentralConfig.h>
#include <fwk/SVNGlobalRevision.h>
#include <fwk/RandomEngineRegistry.h>
#include <utl/Math.h>

#include <utl/MathConstants.h>
#include <utl/CoordinateSystemPtr.h>
#include <utl/AxialVector.h>
#include <utl/Vector.h>
#include <utl/PhysicalConstants.h>
#include <utl/AugerUnits.h>

#include <CLHEP/Random/Randomize.h>

#include <TMap.h>
#include <TTree.h>
#include <TGraph.h>
#include <TCanvas.h>
#include <TCutG.h>
#include <TH2D.h>
#include <THStack.h>
#include <TLegend.h>
#include <TStyle.h>
#include <TLatex.h>
#include <TH1D.h>
#include <TFile.h>
#include <TVector3.h>
#include <vector>
#include <AugerEvent.h>
#include <EyeEvent.hh>
#include <EyePixelList.hh>
#include <FadcData.hh>

using namespace std;
using namespace utl;
using namespace fwk;
using namespace evt;
using namespace fevt;
using namespace fdet;
using namespace det;
using CLHEP::RandFlat;

namespace ComparaisonStudyNS {

// Initialize your static data members.

// Define the methods preferibly in the same order as listed in the header file.

ComparaisonStudy::ComparaisonStudy() 
{
  // Initialize your class.
  // Prefer initialization lists over = to 
  // initialize your members.
}

ComparaisonStudy::~ComparaisonStudy()
{
}

VModule::ResultFlag 
ComparaisonStudy::Init()
{
  fData = false;
  
  outputPlots = new TFile("output.root","recreate");
  
  eventChecker.push_back("no events yet");

  for(int i = 0; i < fNTels; i++){
    for(int j = 0; j < fNPixels; j++){
      TString hname("hRawData_Pix");hname+=j;hname+="Tel";hname+=i;
      TString htitle("Raw Pixel Data");
      fhRawPixelData[i][j] = new TH1D(hname,htitle,600,0,300);
    }
  }
  return eSuccess;
}

VModule::ResultFlag 
ComparaisonStudy::Run(evt::Event& event)
{

  //need to get raid of duplicate events in file. 
  const evt::Header& header = event.GetHeader();
  int sizeChecker = eventChecker.size();
  for(int i = 0; i < sizeChecker; i++){
    if(eventChecker[i] ==  header.GetId()){
      return eSuccess;
    }else{
      eventChecker.push_back(header.GetId());
      continue;
    }
  }

  if(fData){
    if (!(header.GetId() == "eye4_run6402_event432")) return eSuccess;
      //      if (!(header.GetId() == "eye4_run6402_event432" || header.GetId() == "eye4_run6402_event433" || header.GetId() == "eye4_run6402_event434")) return eSuccess; //select events of interest. 
  }
  
  AugerEvent& rawEvent = event.GetRawEvent();
  INFO("New Raw Event!");
  fEventCounter++;

  for (AugerEvent::EyeIterator eyeIter = rawEvent.EyesBegin();
       eyeIter != rawEvent.EyesEnd(); ++eyeIter) {
    
    TEyeEvent& eyeEvent = *eyeIter;
    TEyePixelList* eyePixelList = eyeEvent.GetPixelList();
    TEyeFADCData* eyeFADCData = eyeEvent.GetFADCData();
    const unsigned int numpixels = eyePixelList->GetNumPixels();
    TEyeEventHeader *eyeHeader = eyeEvent.GetEventHeader();
    const int eyeId = eyeEvent.GetEventHeader()->GetEyeNo();
    const fdet::FDetector& detFD = det::Detector::GetInstance().GetFDetector();
    FEvent& fdEvent = event.GetFEvent();
    fevt::Eye& eye = fdEvent.GetEye(eyeId);


    cout << eyeEvent.GetEventHeader()->GetEventNo() << " " << eyePixelList->GetNumPixels() << " " <<  eyePixelList->GetEyeNo() << endl;
    cout << eyeId << endl;

    TString fName("");
    if(fData){fName+="tracesData.root";}else{fName+="tracesSimulation.root";}
    TFile fTMP(fName,"recreate");
      
    for (unsigned int iPixel = 0; iPixel < eyePixelList->GetNumPixels(); ++iPixel) {
      
      FdUtil::Fd::FdPixelNumber pixelNumber = eyePixelList->GetPixel(iPixel);
      const unsigned int mirrorId = FdUtil::Fd::GetEyeMirrorNo(pixelNumber);
      const unsigned int channelId = FdUtil::Fd::GetMirrorPixelNo(pixelNumber);
      //     const unsigned int pixelId = FdUtil::Fd::GetPixelNo(pixelNumber);
      
      const TFADCData* fadcData = eyeFADCData->GetFADCData(pixelNumber);

      fevt::Telescope& tel = eye.GetTelescope(mirrorId);
      const fdet::FDetector& detFD = det::Detector::GetInstance().GetFDetector();
      const fdet::Eye& detEye = detFD.GetEye(eyeId);
      //cout << " detEye " << eyeId<<endl;
      const fdet::Telescope& detTel = detEye.GetTelescope(mirrorId);
      
      const fdet::Channel& thisChannel = detTel.GetChannel(channelId);
      const unsigned int pixelId = thisChannel.GetPixelId();


      if (!fadcData || thisChannel.IsVirtual()) {
	continue;
      }
      cout << mirrorId << " " << channelId << " " << pixelId << endl;
      
      
      const unsigned int startBin = fadcData->GetTraceStartBin();
      const unsigned int endBin = fadcData->GetTraceEndBin();
      
      TFADCData::FADCDataWord fadcword = fadcData->GetFADCTrace();
      
      double baseline = 0.;
      double baselineRMS = 0.;
      double charge=0.;
            
      //      int telIndex = (LeftMostBay - mirrorId)%6;
      //      int telIndex = 4;
             
      // PEDESTAL CALCULATION : the first 300 bins
      for (unsigned int pos = startBin; pos <startBin+280; ++pos) baseline += int(FADCDataWordGetData(&fadcword[pos]))/280.;
      
      for (unsigned int pos = startBin; pos <startBin+280; ++pos) baselineRMS += pow(int(FADCDataWordGetData(&fadcword[pos])),2)/280.;
      
      baselineRMS -= pow(baseline,2);
      if (baselineRMS>0) baselineRMS=sqrt(baselineRMS);
      else baselineRMS=0.;
      //      cout << baseline  << " " << baselineRMS << endl;
      TString hName("h"); hName+=fEventCounter;hName+="_m";hName+=mirrorId;hName+="_r";hName+=detTel.GetPixel(pixelId).GetRow();hName+="_c";hName+=detTel.GetPixel(pixelId).GetColumn();
      TH1F* trace = new TH1F(hName,hName,500,startBin,endBin);

      for (unsigned int pos = startBin; pos <= endBin; ++pos) {
	//if (pos%100 == 0)cout << pos << endl;
	// here we get the DATA at address pos;

	//must not be the way to get charge 
	charge = FADCDataWordGetData(&fadcword[pos]);
	//	cout << FADCDataWordGetData(&fadcword[0]) << endl;
       	// if (pixelId-1 < 440)fhRawPixelData[telIndex][pixelId-1]->Fill((pos*(fEventCounter-1))*0.2,charge);
	// if (fhRawPixelData[telIndex][pixelId-1]->GetEntries() == 0) delete fhRawPixelData[telIndex][pixelId-1];
	//   	if (pixelId-1 < 440) trace.Fill((pos*(fEventCounter-1))*0.2,charge);
       	if (pixelId <= 440) trace->Fill(pos,charge-baseline);
      }//trace loop
      // trace->Rebin(2);
      if (trace->GetEntries() == 0 || !(detTel.GetPixel(pixelId).GetColumn()==10) || mirrorId != 4) delete trace;
      
    }//pixel loop
    fTMP.Write();
    fTMP.Close();
  }//page loop

  
  return eSuccess;
}

VModule::ResultFlag 
ComparaisonStudy::Finish() 
{
  outputPlots->Write();
  
  return eSuccess;
}

}
